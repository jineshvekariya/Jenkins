pipeline{
    agent{
        label 'devops'
    }

 // IF TOO MUCH BUILDS STAYING ON SCREEN, UNCOMMENT BELOW EXCEPT THIS LINE
    // options{
        // buildDiscarder(logRotator(numToKeepStr: '3'))
    // }

    parameters{
        string(name: 'ImageName', defaultValue: 'jenkinsapp')
        string(name: 'ImageTag', defaultValue: 'latest')
        string(name: 'ContainerPort', defaultValue: '8088')
        string(name: 'ContainerName', defaultValue: 'jenkinsappcontainer')
    }

    environment{
        DOCKER_REGISTRY_CREDS = credentials('docker-registry-login')
        SONAR-SCANNER = tool 'sonar-scanner'
    }

    stages{
        stage('App Code Checkout') {
            steps{
                git url: 'https://github.com/jineshvekariya/jenkins.git', branch: 'main'    
            }  
        }

        stage('Sonar Analysis'){
            steps{
                dir('/src'){
                    withSonarQubeEnv('sonar-scanner') {
                        sh ''' $SONAR_SCANNER/bin/sonar-scanner \
                        -Dsonar.projectName=jenkins-docker-pipeline1 \
                        -Dsonar.python.version=3.11 \
                        -Dsonar.projectKey=jenkins-docker-pipeline1 '''
                    }
                }
            }
        }

        stage("Quality Gate"){
            steps{
                timeout(time: 1, unit: 'HOURS'){
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token' 
                }
            }
        }

        stage('Build Image') {
            steps{
                sh 'ls -la'
                sh "docker build -t ${parames:ImageName}:${parames:ImageTag} ."
            }
        }

        stage('Push to Registry'){
            steps{
                sh "docker login -u $DOCKER_REGISTRY_CREDS_USR -p $DOCKER_REGISTRY_CREDS_PSW"
                sh "docker tag ${parames:ImageName}:${parames:ImageTag} $DOCKER_REGISTRY_CREDS_USR/${parames:ImageName}:${parames:ImageTag}"
                sh "docker push $DOCKER_REGISTRY_CREDS_USR/${parames:ImageName}:${parames:ImageTag}"
                sh "docker rmi -f ${parames:ImageName}:${parames:ImageTag}"
                // sh "docker rmi -f $DOCKER_REGISTRY_CREDS_USR/${parames:ImageName}:${parames:ImageTag}"
            }
        }

        stage('Container Create'){
            steps{
                // sh "docker rm -f ${parames:ContainerName}"
                sh "docker run -dit --name ${parames:ContainerName} -p ${parames:ContainerPort}:80 $DOCKER_REGISTRY_CREDS_USR/${parames:ImageName}:${parames:ImageTag}"
            }
        }
    } 
}